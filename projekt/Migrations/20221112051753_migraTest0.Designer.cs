// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace projekt.Migrations
{
    [DbContext(typeof(DatabaseDbContext))]
    [Migration("20221112051753_migraTest0")]
    partial class migraTest0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projekt.Data.Models.Konto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Haslo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypKonta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UzytkownikId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UzytkownikId")
                        .IsUnique();

                    b.ToTable("Konta");
                });

            modelBuilder.Entity("projekt.Data.Models.Obserwacja", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OgloszenieId")
                        .HasColumnType("bigint");

                    b.Property<long>("UzytkownikId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OgloszenieId");

                    b.HasIndex("UzytkownikId");

                    b.ToTable("Obserwacje");
                });

            modelBuilder.Entity("projekt.Data.Models.Ogloszenie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataStworzenia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataWygasniecia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tytul")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Ogloszenia");
                });

            modelBuilder.Entity("projekt.Data.Models.Skrzynka", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("WlascicielId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WlascicielId")
                        .IsUnique();

                    b.ToTable("Skrzynki");
                });

            modelBuilder.Entity("projekt.Data.Models.Uzytkownik", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("projekt.Data.Models.Wiadomosc", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<long>("SkrzynkaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("SkrzynkaId");

                    b.ToTable("Wiadomosci");
                });

            modelBuilder.Entity("projekt.Data.Models.Konto", b =>
                {
                    b.HasOne("projekt.Data.Models.Uzytkownik", "Uzytkownik")
                        .WithOne("Konto")
                        .HasForeignKey("projekt.Data.Models.Konto", "UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("projekt.Data.Models.Obserwacja", b =>
                {
                    b.HasOne("projekt.Data.Models.Ogloszenie", "Ogloszenie")
                        .WithMany("Obserwacje")
                        .HasForeignKey("OgloszenieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("projekt.Data.Models.Uzytkownik", "Uzytkownik")
                        .WithMany("Obserwacje")
                        .HasForeignKey("UzytkownikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ogloszenie");

                    b.Navigation("Uzytkownik");
                });

            modelBuilder.Entity("projekt.Data.Models.Ogloszenie", b =>
                {
                    b.HasOne("projekt.Data.Models.Uzytkownik", "Autor")
                        .WithMany("Ogloszenia")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("projekt.Data.Models.Skrzynka", b =>
                {
                    b.HasOne("projekt.Data.Models.Uzytkownik", "Wlasciciel")
                        .WithOne("Skrzynka")
                        .HasForeignKey("projekt.Data.Models.Skrzynka", "WlascicielId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wlasciciel");
                });

            modelBuilder.Entity("projekt.Data.Models.Wiadomosc", b =>
                {
                    b.HasOne("projekt.Data.Models.Uzytkownik", "Autor")
                        .WithMany("Wiadomosci")
                        .HasForeignKey("AutorId");

                    b.HasOne("projekt.Data.Models.Skrzynka", "Skrzynka")
                        .WithMany("Wiadomosci")
                        .HasForeignKey("SkrzynkaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Skrzynka");
                });

            modelBuilder.Entity("projekt.Data.Models.Ogloszenie", b =>
                {
                    b.Navigation("Obserwacje");
                });

            modelBuilder.Entity("projekt.Data.Models.Skrzynka", b =>
                {
                    b.Navigation("Wiadomosci");
                });

            modelBuilder.Entity("projekt.Data.Models.Uzytkownik", b =>
                {
                    b.Navigation("Konto");

                    b.Navigation("Obserwacje");

                    b.Navigation("Ogloszenia");

                    b.Navigation("Skrzynka");

                    b.Navigation("Wiadomosci");
                });
#pragma warning restore 612, 618
        }
    }
}
